#!/bin/bash

## epoch_ms to timestamp
# alias ts='f(){ python3 -c "from datetime import datetime; print(datetime.fromtimestamp(${@}/1000 - (60*60*7)).strftime(\"%Y-%m-%d %H:%M:%S\"))" ; unset -f f;}; f'
ts () { python3 -c "from datetime import datetime; print(datetime.fromtimestamp(${1}/1000 - (60*60*7)).strftime(\"%Y-%m-%d %H:%M:%S\"))"; }

## launch lazygit
alias lg='lazygit'

################################################################################
#                           Common Git Commands
################################################################################

#######################
###### Helpers
#######################
# function to confirm operation
confirm_branch () {
    branch=$(gbc 2>&1)
    if [ $? -ne 0 ]; then
        return 1
    fi

    if [ -n "$ZSH_VERSION" ]; then
        read "?You are about to $1 $branch. Continue? (y/n) " confirm
    else
        read -p "You are about to $1 $branch. Continue? (y/n) " confirm 
    fi

    if [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]]; then
        return 0
    fi

    return 1
}


#######################
###### Basics
#######################
alias gb='git branch'
alias gs='git status'
alias gc='git clean -dxf'


#######################
###### Branching
#######################
# return current branch
alias gbc='git branch --show-current'
# grep for branches
gbg () { git branch | grep -E "$@"; }
# make and checkout new branch
alias gbn='git checkout -b'
# delete branch
alias gbd='git branch -D'
# delete branch, grep branch name
gbdg () { gbd $(gbg "$@"); }
# fetch branch
gfo () { branch=$1; shift; git fetch --prune origin "$branch":"$branch" "$@"; }
# checkout branch
alias gco='git checkout'
# checkout branch, grep branch name
gcog () { local branch=$1; shift; gco $(gbg "$branch") "$@"; }
# fetch and checkout branch
gfco () { gfo "$1" && gco "$1"; }


#######################
###### Conflicts
#######################
# list conflicted files
alias gcl='git diff --name-only --diff-filter=U'
# check if there are any conflict markers left
alias gdc='git diff --check'


#######################
###### Log
#######################
# open the log (current branch or other)
alias gl='git log'
# open the log, grep for branch name
# alias glg='f(){ git log `gbg "$@"` ; unset -f f;}; f'
glg () {
    local branch=$1
    shift
    gl $(gbg "$branch") "$@"
}
# short log
alias glo='gl --oneline'
# short log, grep for branch name
# alias glog='f(){ git log --oneline `gbg "$@"` ; unset -f f;}; f'
glog () {
    local branch=$1
    shift
    glo $(gbg "$branch") "$@"
}


#######################
###### Rebasing
#######################
# rebase
alias grb='git rebase'
# squash, pass in how far back to go
# alias gsq='git rebase -i HEAD~'
gsq () {
    local back=$1
    shift
    git rebase -i HEAD~"$back" "$@"
}
# rebase onto other branch from origin
# alias grbo='f(){ grb origin/"$@" ; unset -f f;}; f'
grbo () { local branch=$1; shift; grb origin/"$branch" "$@"; }
# fetch and rebase
# alias gfrb='f(){ gfo "$1" ; [ $? -eq 0 ] && grb "$1" || echo "Fetch failed; exiting" ; unset -f f;}; f'
gfrb () { gfo "$1" || echo "Fetch failed; exiting" && grb "$1"; }
# continue rebase
alias grc='grb --continue'
# abort rebase
alias gra='grb --abort'


#######################
###### Cherry-picking
#######################
# cherry-pick
alias gcp='git cherry-pick'
# continue cherry-pick
alias gcpa='gcp --abort'
# abort cherry-pick
alias gcpc='gcp --continue'


#######################
###### Submodules
#######################
# init all submodules defined in $SUBMODULES (defined elsewhere)
# alias gsm='git submodule update --init --recursive $SUBMODULES'
# force init all submodules defined in $SUBMODULES (defined elsewhere)
# alias gsmf='git submodule update --init --recursive -f $SUBMODULES'


#######################
###### Committing
#######################
# amend commit, reset author
alias gca='git commit --amend'
# amend commit, reset author, don't edit commit msg
alias gcan='gca --no-edit'
# add conflicted files
alias gac='git add $(gcl)'
# fixup commit
gcf () {
    local back=$1
    shift
    git commit --fixup HEAD~"$back" "$@"
}


#######################
###### Pushing
#######################
# force push, confirm first
gpf () {
    confirm_branch "force-push to" && git push -f || echo "cancelled"
}
# push branch to origin, confirm first
gpu () {
    confirm_branch "push branch to origin" && git push -u origin $(gbc) || echo "cancelled"
}
# force push branch to origin, confirm first
gpuf () {
    confirm_branch "force push branch to origin" && git push -u origin $(gbc) -f || echo "cancelled"
}


#######################
###### Misc
#######################
alias gsh='git rev-parse --short HEAD'
