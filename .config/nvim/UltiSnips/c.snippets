# block comment
snippet /* "comment"
/*
 * ${0}
 */
endsnippet

# define
snippet def "#define ..."
#define $1
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

# ternary
snippet t
	${0:/* condition */} ? ${1:/* true val */} : ${2:/* false val */};
endsnippet

snippet tv
${0:${VISUAL}} ? ${1:/* true val */} : ${2:/* false val */};
endsnippet

# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

# case
snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

#ret
snippet ret
return ${0};
endsnippet

##
## Loops
# for
snippet forz
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# for (custom)
snippet for
for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	${5}
}
endsnippet

# while
snippet wh
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

##
## Functions
# function definition
snippet fun
${1:returnType} ${2:function_name}(${3})
{
	${4}
}
endsnippet

# function definition with zero parameters
snippet fun0
${1:returnType} ${2:function_name}(void)
{
	${3}
}
endsnippet

# can
snippet canrxs
CANRXS(${1:source}, ${2:signalName}, signal)
endsnippet

